{"version":3,"sources":["CryptoRate-components/CryptoList.js","CryptoRate-components/FilteringCurrency.js","CryptoRate.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","listItems","cryptoArray","map","element","index","key","className","colorClass","last","currency","symbol","FilteringCurrency","type","placeholder","onChange","filter","CryptoRate","getData","axios","get","then","res","cryptoData","data","transformedCryptoArray","i","classValue","prevCryptoValue","state","console","log","undefined","cryptoObj","push","setState","filteredCryptoArray","event","cryptoElement","toUpperCase","includes","target","value","setInterval","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAsBeA,EApBI,SAAAC,GAGf,IAAMC,EAAYD,EAAME,YAAYC,KAAK,SAACC,EAASC,GAE/C,OACI,wBAAIC,IAAKD,EAAOE,UAAU,cACtB,2BAAG,0BAAMA,UAAWH,EAAQI,YAAaJ,EAAQK,MAAjD,IAA+DL,EAAQM,SAAvE,IAAkFN,EAAQO,YAItG,OACI,6BACI,wBAAIJ,UAAU,UACTN,KCRFW,EANW,SAAAZ,GACtB,OACI,2BAAOa,KAAK,OAAOC,YAAY,SAASC,SAAUf,EAAMgB,UCuFjDC,E,YAnFX,aAAe,IAAD,8BACV,+CAgBJC,QAAU,WACNC,IACKC,IADL,0GAIKC,MAAK,SAAAC,GACF,IAAMC,EAAaD,EAAIE,KAGnBC,EAAyB,GACzBC,EAAI,EACJC,EAAa,OACjB,IAAK,IAAIrB,KAAOiB,EAAY,CAExB,IAAIK,EAAkB,EAAKC,MAAM3B,YAAYwB,GAC7CI,QAAQC,IAAIH,QACYI,IAApBJ,IACAE,QAAQC,IAAI,EAAKF,MAAM3B,YAAYwB,GAAGjB,MAClCmB,EAAgBnB,KAAOc,EAAWjB,GAAKG,KACvCkB,EAAa,MAERC,EAAgBnB,KAAOc,EAAWjB,GAAKG,OAC5CkB,EAAa,UAKrB,IAAIM,EAAY,CACZxB,KAAMc,EAAWjB,GAAKG,KACtBE,OAAQY,EAAWjB,GAAKK,OACxBD,SAAUJ,EACVE,WAAYmB,GAGhBF,EAAuBS,KAAKD,GAC5BP,IAEJ,EAAKS,SAAS,CACVjC,YAAauB,EACbW,oBAAqBX,QAxDvB,EA6DdT,OAAS,SAACqB,GACN,IAAID,EAAsB,EAAKP,MAAM3B,YAAYc,QAAO,SAAAsB,GACpD,OAAOA,EAAc5B,SAChB6B,cACAC,SAASH,EAAMI,OAAOC,MAAMH,kBAErC,EAAKJ,SAAS,CAAEjC,YAAakC,KAjE7B,EAAKP,MAAQ,CACT3B,YAAa,GACbkC,oBAAqB,IAJf,E,iFAQO,IAAD,OAChBO,aAAY,WACR,EAAKzB,YACN,O,+BA8DH,OACI,6BACI,kBAAC,EAAD,CAAmBF,OAAQ4B,KAAK5B,SAChC,kBAAC,EAAD,CAAYd,YAAa0C,KAAKf,MAAM3B,mB,GA9E3B2C,aCOVC,MARf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCIcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.953ac9aa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst CryptoList = props => {\r\n\r\n\r\n    const listItems = props.cryptoArray.map( (element, index)=> {\r\n\r\n        return (\r\n            <li key={index} className=\"crypto-li \">\r\n                <p><span className={element.colorClass}>{element.last}</span> {element.currency} {element.symbol}</p>\r\n            </li>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <ul className=\"crypto\">\r\n                {listItems}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CryptoList;","import React from \"react\";\r\n\r\nconst FilteringCurrency = props => {\r\n    return (\r\n        <input type=\"text\" placeholder=\"Szukaj\" onChange={props.filter} />\r\n    )\r\n}\r\n\r\nexport default FilteringCurrency;;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport CryptoList from \"./CryptoRate-components/CryptoList\";\r\nimport FilteringCurrency from \"./CryptoRate-components/FilteringCurrency\";\r\n\r\nclass CryptoRate extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cryptoArray: [],\r\n            filteredCryptoArray: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.getData();\r\n        }, 5000)\r\n\r\n    }\r\n\r\n\r\n    //funckja pobierajaca dane\r\n    getData = () => {\r\n        axios\r\n            .get(\r\n                `https://blockchain.info/pl/ticker?fbclid=IwAR2wOEDMLJTVXrQ86D9dkUe7ENOZ0QoZdyoJj_lRcqqFeCHEfXSXi4HrKnw`\r\n            )\r\n            .then(res => {\r\n                const cryptoData = res.data;\r\n\r\n                //zamiana obiektu na tablice\r\n                let transformedCryptoArray = [];\r\n                let i = 0;\r\n                let classValue = 'blue';\r\n                for (let key in cryptoData) {\r\n\r\n                    let prevCryptoValue = this.state.cryptoArray[i];\r\n                    console.log(prevCryptoValue)\r\n                    if (prevCryptoValue !== undefined) {\r\n                        console.log(this.state.cryptoArray[i].last);\r\n                        if (prevCryptoValue.last > cryptoData[key].last) {\r\n                            classValue = 'red';\r\n                        }\r\n                        else if (prevCryptoValue.last < cryptoData[key].last) {\r\n                            classValue = 'green';\r\n                        }\r\n                    }\r\n\r\n\r\n                    let cryptoObj = {\r\n                        last: cryptoData[key].last,\r\n                        symbol: cryptoData[key].symbol,\r\n                        currency: key,\r\n                        colorClass: classValue\r\n                    }\r\n\r\n                    transformedCryptoArray.push(cryptoObj);\r\n                    i++;\r\n                }\r\n                this.setState({\r\n                    cryptoArray: transformedCryptoArray,\r\n                    filteredCryptoArray: transformedCryptoArray\r\n                });\r\n            });\r\n    };\r\n\r\n    filter = (event) => {\r\n        let filteredCryptoArray = this.state.cryptoArray.filter(cryptoElement => {\r\n            return cryptoElement.currency\r\n                .toUpperCase()\r\n                .includes(event.target.value.toUpperCase());\r\n        });\r\n        this.setState({ cryptoArray: filteredCryptoArray });\r\n    };\r\n    \r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <FilteringCurrency filter={this.filter} />\r\n                <CryptoList cryptoArray={this.state.cryptoArray} />\r\n            </div >\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default CryptoRate;\r\n","import React from 'react';\nimport './App.css';\n\nimport CryptoRate from \"./CryptoRate\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CryptoRate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}